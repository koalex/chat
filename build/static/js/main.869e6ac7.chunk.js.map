{"version":3,"sources":["actions.js","reducer.js","components/Header/index.js","hooks/useSocket.js","components/Chat/index.js","App.js","store.js","serviceWorker.js","index.js","components/Chat/Chat.module.css","components/Header/Header.module.css","App.module.css","assets/img/logo1x1.png"],"names":["TYPES","fetchUsersSuccess","createAction","userJoin","userLeft","fetchMessages","fetchMessagesSuccess","newMessage","appReducer","combineReducers","chat","handleActions","state","users","payload","loading","messages","message","sort","a","b","created_at","rootReducer","action","Header","useSelector","AppBar","position","Toolbar","className","CSS","toolbar","logoContainer","src","logo","alt","href","target","rel","height","viewBox","version","width","aria-hidden","fillRule","d","Socket","io","transports","forceNew","rejectUnauthorized","secure","process","useSocket","useState","socket","setSocket","useEffect","on","console","info","error","reason","some","v","open","attemptNumber","opts","formatDate","ms","now","Date","date","day","toString","getDate","slice","month","getMonth","hours","getHours","min","getMinutes","getFullYear","Chat","dispatch","useDispatch","textareaEl","useRef","window","scroll","document","body","offsetHeight","connected","emit","self","current","value","onSubmit","ev","preventDefault","trim","container","List","messagesList","map","Paper","key","text","elevation","selfMessage","ListItem","alignItems","ListItemText","primary","secondary","form","TextField","autoFocus","label","onKeyDown","shiftKey","inputRef","multiline","rows","variant","textarea","Button","color","type","store","createStore","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.869e6ac7.chunk.js","sourcesContent":["import { createAction } from 'redux-actions';\n\nexport const TYPES = {\n  FETCH_USERS_SUCCESS: '@@CHAT/FETCH_USERS_SUCCESS',\n  USER_JOIN: '@@CHAT/USER_JOIN',\n  USER_LEFT: '@@CHAT/USER_LEFT',\n  FETCH_MESSAGES: '@@CHAT/FETCH_MESSAGES',\n  FETCH_MESSAGES_SUCCESS: '@@CHAT/FETCH_MESSAGES_SUCCESS',\n  NEW_MESSAGE: '@@CHAT/NEW_MESSAGE',\n};\n\nexport const fetchUsersSuccess = createAction(TYPES.FETCH_USERS_SUCCESS);\n\nexport const userJoin = createAction(TYPES.USER_JOIN);\n\nexport const userLeft = createAction(TYPES.USER_LEFT);\n\nexport const fetchMessages = createAction(TYPES.FETCH_MESSAGES);\n\nexport const fetchMessagesSuccess = createAction(TYPES.FETCH_MESSAGES_SUCCESS);\n// TODO: fetchMessagesError\n\nexport const newMessage = createAction(TYPES.NEW_MESSAGE);\n","import { combineReducers } from 'redux';\nimport { handleActions } from 'redux-actions';\nimport {\n  fetchUsersSuccess,\n  userJoin,\n  userLeft,\n  fetchMessages,\n  fetchMessagesSuccess,\n  newMessage,\n} from './actions';\n\nconst initialState = {\n  users: 0,\n  messages: [],\n  loading: false,\n};\n\nconst appReducer = combineReducers({\n  chat: handleActions(\n    {\n      [fetchUsersSuccess]: (state, { payload: { users } }) => ({\n        ...state,\n        users,\n      }),\n\n      [userJoin]: state => ({\n        ...state,\n        users: state.users + 1,\n      }),\n\n      [userLeft]: state => {\n        if (!state.users) return state;\n\n        return {\n          ...state,\n          users: state.users - 1,\n        };\n      },\n\n      [fetchMessages]: state => ({\n        ...state,\n        loading: true,\n      }),\n\n      [fetchMessagesSuccess]: (state, { payload: { messages } }) => ({\n        ...state,\n        messages,\n      }),\n\n      [newMessage]: (state, { payload: { message } }) => ({\n        ...state,\n        messages: [...state.messages, message].sort(\n          (a, b) => a.created_at > b.created_at,\n        ),\n      }),\n    },\n    initialState,\n  ),\n});\n\nexport const rootReducer = (state, action) => appReducer(state, action);\n","import CSS from './Header.module.css';\nimport React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { useSelector } from 'react-redux';\nimport logo from 'assets/img/logo1x1.png';\n\nconst Header = () => {\n  const users = useSelector(state => state.chat.users);\n\n  return (\n    <AppBar position=\"fixed\">\n      <Toolbar className={CSS.toolbar}>\n        <div className={CSS.logoContainer}>\n          <img src={logo} alt=\"Group chat\" className={CSS.logo} />\n          {users} users\n        </div>\n        <a\n          className={CSS['App-link']}\n          href=\"https://github.com/koalex/chat\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <svg\n            className=\"octicon octicon-mark-github v-align-middle\"\n            height=\"32\"\n            viewBox=\"0 0 16 16\"\n            version=\"1.1\"\n            width=\"32\"\n            aria-hidden=\"true\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"\n            />\n          </svg>\n        </a>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import { useState, useEffect } from 'react';\nimport * as io from 'socket.io-client';\n\nconst Socket = io('http://localhost:3000', {\n  transports: ['websocket'],\n  forceNew: false, // single connection is used when connecting to different namespaces (to minimize resources)\n  rejectUnauthorized: true,\n  secure: process.env.REACT_APP_HTTPS === 'true',\n});\n\nfunction useSocket() {\n  const [socket, setSocket] = useState(null);\n\n  useEffect(() => {\n    Socket.on('connect', () => {\n      console.info('socket connected');\n      setSocket(Socket);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('connect_error', console.error);\n    socket.on('error', console.error);\n    socket.on('disconnect', reason => {\n      if (['io server disconnect'].some(v => v === reason)) {\n        socket.open();\n      }\n    });\n    socket.on('reconnect_attempt', attemptNumber => {\n      if (attemptNumber > 5) {\n        socket.io.opts.transports = ['polling', 'websocket'];\n      }\n    });\n  }, [socket]);\n\n  return socket;\n}\n\nexport default useSocket;\n","import CSS from './Chat.module.css';\nimport React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useSocket from 'hooks/useSocket';\nimport { fetchUsersSuccess, userJoin, userLeft, newMessage } from 'actions';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nconst formatDate = ms => {\n  const now = new Date();\n  const date = new Date(ms);\n  const day = ((0).toString() + date.getDate()).slice(-2);\n  const month = ((0).toString() + (date.getMonth() + 1)).slice(-2);\n  const hours = ((0).toString() + (date.getHours() + 1)).slice(-2);\n  const min = ((0).toString() + (date.getMinutes() + 1)).slice(-2);\n\n  if (\n    now.getFullYear() === date.getFullYear() &&\n    now.getDate() === date.getDate() &&\n    now.getMonth() === date.getMonth()\n  ) {\n    return `${hours}:${min}`;\n  }\n\n  return `${day}.${month}.${date.getFullYear()} ${hours}:${min}`;\n};\n\nconst Chat = () => {\n  const dispatch = useDispatch();\n  const socket = useSocket();\n  const messages = useSelector(state => state.chat.messages);\n  const textareaEl = useRef(null);\n\n  useEffect(() => {\n    window.scroll(0, document.body.offsetHeight);\n  }, [messages]);\n\n  useEffect(() => {\n    if (socket && socket.connected) {\n      socket.emit('users count');\n\n      socket.on('users count', users => {\n        dispatch(fetchUsersSuccess({ users }));\n      });\n      socket.on('user joined', () => {\n        dispatch(userJoin());\n      });\n      socket.on('user left', () => {\n        dispatch(userLeft());\n      });\n      socket.on('new message', message => {\n        if (message.self) {\n          textareaEl.current.value = '';\n        }\n        dispatch(newMessage({ message }));\n      });\n    }\n  }, [socket, dispatch]);\n\n  const onSubmit = ev => {\n    ev.preventDefault();\n    const message = textareaEl.current.value.trim();\n    if (!message) return;\n\n    socket.emit('new message', message);\n  };\n\n  const onKeyDown = ev => {\n    if (ev.key === 'Enter' && !ev.shiftKey) {\n      onSubmit(ev);\n    }\n  };\n\n  return (\n    <div className={CSS.container}>\n      <List className={CSS.messagesList}>\n        {messages.map(message => (\n          <Paper\n            key={message.text + message.created_at}\n            elevation={3}\n            className={`${CSS.message} ${message.self ? CSS.selfMessage : ''}`}\n          >\n            <ListItem alignItems=\"flex-start\">\n              <ListItemText\n                primary={message.text}\n                secondary={formatDate(message.created_at)}\n              />\n            </ListItem>\n          </Paper>\n        ))}\n      </List>\n      <form action=\"#\" onSubmit={onSubmit} className={CSS.form}>\n        <TextField\n          autoFocus\n          label=\"Enter - отправить | Shift + Enter - перенос строки\"\n          onKeyDown={onKeyDown}\n          inputRef={textareaEl}\n          multiline\n          rows={4}\n          variant=\"outlined\"\n          className={CSS.textarea}\n        />\n        <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n          Send\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default Chat;\n","import CSS from './App.module.css';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { configureStore } from './store';\nimport Header from 'components/Header';\nimport Chat from './components/Chat';\n\nconst store = configureStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className={CSS.App}>\n        <Header />\n        <Chat />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { createStore } from 'redux';\nimport { rootReducer } from './reducer';\n\nexport const configureStore = () => {\n  return createStore(rootReducer);\n};\n","/*\n  This optional code is used to register a service worker.\n  register() is not called by default.\n\n  This lets the app load faster on subsequent visits in production, and gives\n  it offline capabilities. However, it also means that developers (and users)\n  will only see deployed updates on subsequent visits to a page, after all the\n  existing tabs open on the page have been closed, since previously cached\n  resources are updated in the background.\n  To learn more about the benefits of this model and instructions on how to\n  opt-in, read https://bit.ly/CRA-PWA\n*/\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.info(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(reg => {\n      const registration = reg;\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.info(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.info('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.info(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chat_container__19YMI\",\"messagesList\":\"Chat_messagesList__3U_fs\",\"form\":\"Chat_form__2t4T1\",\"message\":\"Chat_message__1mr6p\",\"selfMessage\":\"Chat_selfMessage__WKnFI\",\"textarea\":\"Chat_textarea__1tMm5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toolbar\":\"Header_toolbar__1EGzY\",\"logoContainer\":\"Header_logoContainer__gaEZM\",\"logo\":\"Header_logo__3_SJs\",\"App-link\":\"Header_App-link__2byH-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","module.exports = __webpack_public_path__ + \"static/media/logo1x1.4228d395.png\";"],"sourceRoot":""}